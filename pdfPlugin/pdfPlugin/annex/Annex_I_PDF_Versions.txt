
ANNEX I - PDF VERSIONS AND COMPATIBILITY (NORMATIVE)

[pag 727]
I.1 General

The goal of PDF is to enable people to exchange and view electronic documents easily and reliably. 
Ideally, this means that any conforming reader should be able to display the contents of any PDF file, 
even if the PDF file was created long before or long after the conforming reader was developed. 
In reality, new versions of PDF are occasionally introduced to provide additional capabilities not present before. 
Furthermore, conforming readers may support private extensions to PDF, making some conforming readers more capable than others, 
depending on what extensions are present.

PDF has been designed to enable users to view everything in the document that the conforming reader understands and to 
enable the conforming reader to ignore or inform the user about objects not understood. 
The decision whether to ignore or inform the user is made on a feature-by-feature basis, at the discretion of the confirming 
reader.

[pag 727]
I.2 PDF Version Numbers

The PDF version number identifies a specific version of the Adobe PDF specification. 
A PDF file is labelled with the version number of the Adobe PDF specification that the file conforms to.

PDF version numbers take the form M . m, where M is the major and m the minor version number, each represented as a decimal integer.

The version number for a subsequent version of the PDF specification is formed either by incrementing m or by incrementing M and setting m to zero, as follows:

• The major version is incremented if PDF changes in a way that is not upward-compatible from previous versions. 
(In practice, this has never happened; the current major version is 1.)
• The minor version is incremented if PDF changes in a way that is upward-compatible from previous versions. 
(The current minor version is 7.)
• The PDF version number does not change at all if private data is included in a PDF file by one of the extension mechanisms defined in this specification.

The header in the first line of a PDF file specifies a PDF version (see 7.5.2, "File Header"). 
Starting with PDF 1.4, a PDF version can also be specified in the Version entry of the document catalogue, 
essentially updating the version associated with the file by overriding the one specified in the file header (see 7.7.2, "Document Catalog"). 
As described in the following paragraphs, the conforming product’s behaviour upon opening or saving a document 
depends on comparing the PDF file's version with the PDF version that the conforming product supports.

A conforming readers shall attempt to read any PDF file, even if the file’s version is more recent than that of the conforming reader.

If a conforming reader opens a PDF file with a major version number newer than the version that it supports, 
it should warn the user that it is unlikely to be able to read the document successfully and that the user cannot change or save the document. 
Upon the first error that is caused by encountering an unrecognized feature, the conforming reader should notify the user that an error 
has occurred but that no further errors will be reported.

(Some errors should nevertheless be always reported, including file I/O errors, out-of-memory errors, and notifications that a command has failed.) 
Processing should continue if possible.

If a conforming reader opens a PDF file that has a minor version number newer than the version that it supports, 
it should notify the user that the document may contain information the conforming reader does not understand. 
If the conforming reader encounters an error, it should notify the user that the PDF file’s version is newer than expected, 
an error has occurred, and no further errors will be reported.

Whether and how the version of a PDF file should change when the document is modified and saved depends on several factors. 
If the PDF file has a newer version than the conforming product supports, the conforming product should not alter the version—that is, 
a PDF file’s version should never be changed to an older version. 
If the PDF file has an older version than the conforming product supports, 
the conforming product may update the PDF file’s version to match the conforming product’s version. 
If a user modifies a document by inserting the contents of another PDF file into it, 
the saved document’s version should be the most recent of the conforming product’s version, the original PDF file's version, 
and the inserted PDF file’s version.

[pag 728]
I.3 Feature Compatibility

When a new version of PDF is defined, many features are introduced simply by adding new entries to existing dictionaries. 
Earlier versions of conforming readers do not notice the existence of such entries and behave as if they were not there. 
Such new features are therefore both forward- and backward-compatible. 
Likewise, adding entries not described in the PDF specification to dictionary objects does not affect the conforming reader’s 
behaviour. See Annex E for information on how to choose key names that are compatible with future versions of PDF. 
See 7.12.2, “Developer Extensions Dictionary” for a discussion of how to designate the use of public extensions in PDF file.

In some cases, a new feature is impossible to ignore, because doing so would preclude some vital operation such as viewing 
or printing a page. For instance, if a page’s content stream is encoded with some new type of filter, 
there is no way for an earlier version of conforming reader to view or print the page, even though the content stream 
(if decoded) would be perfectly understood by the reader. There is little choice but to give an error in cases like these. 
Such new features are forward-compatible but not backward-compatible.

In a few cases, new features are defined in a way that earlier versions of conforming readers will ignore, 
but the output will be degraded in some way without any error indication. 
If a PDF file undergoes editing by an earlier version of a conforming product that does not understand some of the features 
that the file uses, the occurrences of those features may or may not survive.


