

ANNEX K - POSTSCRIPT (INFORMATIVE)

PostScript Compatibility — Transparent Imaging Model 

[pag 731]
K.1 General

Because the PostScript language does not support the transparent imaging model, a conforming reader desiring to print on a 
PostScript output device needs to have some means for converting the appearance of a document that uses transparency to a purely opaque description.

[pag 731]
K.2 Conversion

Converting the contents of a page from transparent to opaque form entails some combination of shape decomposition and prerendering 
to flatten the stack of transparent objects on the page, performing all the needed transparency computations, and describing the final appearance 
using opaque objects only. Whether the page contains transparent content needing to be flattened can be determined by straightforward analysis of 
the page’s resources; it is not necessary to analyse the content stream itself. 

The conversion to opaque form is irreversible, since all information about how the transparency effects were produced is lost.

To perform the transparency computations properly, the conforming reader needs to know the native colour space of the output device. 
This is no problem when the conforming reader controls the output device directly. 
However, when generating PostScript output, the conforming reader has no way of knowing the native colour space of the PostScript output device. 
An incorrect assumption will ruin the calibration of any CIE-based colours appearing on the page. 

This problem can be addressed in either of two ways:

• If the entire page consists of CIE-based colours, flatten the colours to a single CIE-based colour space rather than to a device colour space. 
The preferred colour space for this purpose can easily be determined if the page has a group attributes dictionary (Group entry in the page object) specifying a CIE-based colour space (see 11.6.6, "Transparency Group XObjects").

• Otherwise, flatten the colours to some assumed device colour space with predetermined calibration. 
In the generated PostScript output, paint the flattened colours in a CIE-based colour space having that calibration.

Because the choice between using spot colorants and converting them to an alternate colour space affects the flattened results of process colours, a decision needs to be made during PostScript conversion about the set of available spot colorants to assume. 
(This differs from strictly opaque painting, where the decision can be deferred until the generated PostScript code is executed.)